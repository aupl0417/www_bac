<?php
namespace app\wap\controller;

use app\common\controller\Wap;
use app\common\tools\Logs;
use think\Request;
use think\Db;
use think\Session;

class User extends Wap{

    protected $userId;
    protected $platformId;

    public function _initialize(){
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->userId     = session('user.userId');
        $this->platformId = session('user.platformId');
    }

    public function index(){
        $this->assign('title', '个人资料');
        return $this->fetch();
    }

    public function profile(){

        if (!Session::has('user') || Session::get('user.userId') == ''){
            $this->redirect('login/index');
        }

        $user = model('User')->getProfile(Session::get('user'));
        $isAuth = $user ? ($user['auth'][2] == 1 ? 1 : 0) : 0;
        $this->assign('user', $user);
        $this->assign('isAuth', $isAuth);
        $this->assign('title', '个人资料');
        return $this->fetch();
    }

    public function setPayPwd(){


        if(Request::instance()->isPost()){
            if (!Session::has('user') || Session::get('user.userId')==''){
                $this->ajaxReturn(ajaxCallBack(301, array('msg' => '您未登录', 'url' => url('login/index'))));
            }

            $currentPayPwd = input('currentPayPwd', '', 'htmlspecialchars,strip_tags,trim');
            $password      = input('password', '', 'htmlspecialchars,strip_tags,trim');
            $repassword    = input('repassword', '', 'htmlspecialchars,strip_tags,trim');

            if(!preg_match('/^\d{6}$/', $password)){
                $this->ajaxReturn(ajaxCallBack(300, '新的提现密码为6位数字'));
            }

            if(!preg_match('/^\d{6}$/', $repassword)){
                $this->ajaxReturn(ajaxCallBack(300, '确认提现密码为6位数字'));
            }

            if($repassword != $password){
                $this->ajaxReturn(ajaxCallBack(300, '两次新密码不一致'));
            }

            $where = array('a_uid' => $this->userId, 'a_platform_id' => $this->platformId);
            $account = Db::name('account')->where($where)->field('a_id as id,a_payPwd as payPwd,a_payPwdNew as payPwdNew')->find();

            if(empty($account['payPwd'])){
                $salt = $this->getSalt(32);
                $data = array(
                    'a_payPwd' => getSuperMD5($password . $salt),
                    'a_payPwdNew' => $salt
                );
                $msg = '设置';
            }else{
                if(!preg_match('/^\d{6}$/', $currentPayPwd)){
                    $this->ajaxReturn(array('state' => 'error', 'message' => '原密码格式不正确'));
                }

                if(getSuperMD5($currentPayPwd . $account['payPwdNew']) != $account['payPwd']){
                    $this->ajaxReturn(array('state' => 'error', 'message' => '原密码错误'));
                }

                $data = array(
                    'a_payPwd' => getSuperMD5($password . $account['payPwdNew']),
                    'a_payPwdNew' => $account['payPwdNew']
                );
                $msg = '修改';
            }

            $res = Db::name('account')->where($where)->update($data);
 
            if ($res === false){
                Logs::writeMongodb(400010,'db_account',$this->userId,$msg . '提现密码失败',Session::get('user'));
				$this->ajaxReturn(ajaxCallBack(300, $msg . '提现密码失败'));
            }else{
                Logs::writeMongodb(400011,'db_account',$this->userId,$msg . '提现密码成功',Session::get('user'));
            $this->ajaxReturn(ajaxCallBack(200, $msg . '提现密码成功'));
            }
 
        }else{
            $where = array('a_uid' => $this->userId, 'a_platform_id' => $this->platformId);
            $account = Db::name('account')->where($where)->field('a_id as id,a_payPwd as payPwd,a_payPwdNew as payPwdNew')->find();
            $isSetPayPwd = $account['payPwd'] ? 1 : 0;

            $this->assign('title', $isSetPayPwd ? '修改提现密码' : '设置提现密码');
            $this->assign('account', $account);
            $this->assign('isSetPayPwd', $isSetPayPwd);
            return $this->fetch();
        }

    }

    public function getSalt($len = 32){
        $string = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
        return substr(str_shuffle($string), 0, $len - 1);
    }

}
